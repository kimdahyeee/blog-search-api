def javaProjects = [project(':core')]
def springProjects = [
        project(':domain-model'), project(':api-core'),
        project(':blog-api')
]

buildscript {
    ext {
        springBootVersion = '2.3.9.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE'
    }
}

allprojects {
    group = 'com.search.blog'
    version = '1.0.0-SNAPSHOT'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
        testRuntimeOnly "org.junit.platform:junit-platform-commons:1.7.0"
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    test {
        useJUnitPlatform()
    }

    jar {
        enabled = true
    }
}

configure(javaProjects) {
    dependencies {
    }
}

configure(springProjects) {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-configuration-processor'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(':blog-api') {
    dependencies {
        implementation project(':domain-model')
        implementation project(':api-core')

        testImplementation project(":domain-model").sourceSets.test.output

        compile('org.springframework.boot:spring-boot-starter-data-redis')
        compile group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'
        annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    }
}

project(':api-core') {
    dependencies {
        api project(':core')
    }
    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}

project(':core') {
    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}

project(':domain-model') {
    def generated = 'src/main/generated'
    sourceSets {
        main.java.srcDirs += [generated]
    }

    tasks.withType(JavaCompile) {
        options.annotationProcessorGeneratedSourcesDirectory = file(generated)
    }

    dependencies {
        api project(':core')
    }

    clean.doLast {
        file(generated).deleteDir()
    }
    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}